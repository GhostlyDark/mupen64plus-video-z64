name: Z64 Video

on:
  push:
    paths-ignore:
      - '**/*.md'
      - '.{gitattributes,gitignore,travis.yml}'
      - 'appveyor.yml,README'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - '.{gitattributes,gitignore,travis.yml}'
      - 'appveyor.yml,README'
  workflow_dispatch:
jobs:

  Linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - cc: GCC
          - cc: Clang
    name: Linux / ${{ matrix.cc }} / x64
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Get build dependencies and arrange the environment
        run: |
          echo "NOTE: Not exist \"libglew2.1:i386\" for Ubuntu 20.04, therefore x86 build doesn't work"
          echo ""
          sudo apt-get update
          sudo apt-get -y install libgl1-mesa-dev libglew-dev libsdl1.2-dev libsdl2-dev
          sudo ldconfig
      - name: Build and related stuff
        run: |
          if [[ "${{ matrix.cc }}" == "GCC" ]]; then
            CC="gcc"
            CXX="g++"
          else
            CC="clang"
            CXX="clang++"
          fi
          ${CC} --version
          echo ""
          git clone --depth 1 https://github.com/mupen64plus/mupen64plus-core.git ../mupen64plus-core
          for SDL in sdl sdl2
          do
            if [[ "${SDL}" == "sdl" ]]; then MSG="1.2"; else MSG="2"; fi
            echo ""
            echo ":: ${{ matrix.cc }} x64 / SDL${MSG} ::"
            echo ""
            make -C projects/unix clean
            echo ""
            make CC="${CC}" CXX="${CXX}" BITS="64" SDL_CONFIG="${SDL}-config" -C projects/unix all
            echo ""
            ls -gG projects/unix/*.so
            ldd projects/unix/mupen64plus-video-z64.so
          done

  MSYS2:
    strategy:
      fail-fast: false
      matrix:
        include:
          - cc: GCC
            platform: x64
            cross: x86_64
            bits: 64
          - cc: GCC
            platform: x86
            cross: i686
            bits: 32
    name: Windows / MSYS2 ${{ matrix.cc }} / ${{ matrix.platform }}
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW${{ matrix.bits }}
          update: true
          install: >-
            git
            make
            mingw-w64-${{ matrix.cross }}-gcc
            mingw-w64-${{ matrix.cross }}-toolchain
            mingw-w64-${{ matrix.cross }}-glew
            mingw-w64-${{ matrix.cross }}-SDL2
      - name: Build and related stuff
        run: |
          export OPTFLAGS="-O2 -flto"
          echo "G_REV=$(git rev-parse --short HEAD)" >> "${GITHUB_ENV}"
          CC="gcc"
          CXX="g++"
          ${CC} --version
          echo ""
          git clone --depth 1 https://github.com/mupen64plus/mupen64plus-core.git ../mupen64plus-core
          echo ""
          echo ":: ${{ matrix.cc }} ${{ matrix.platform }} / SDL2 ::"
          echo ""
          make -C projects/unix clean
          echo ""
          make CC="${CC}" CXX="${CXX}" BITS="${{ matrix.bits }}" -C projects/unix all
          echo ""
          ls -gG projects/unix/*.dll
          ldd projects/unix/mupen64plus-video-z64.dll
      - name: Copy binaries, dependencies, etc...
        run: |
          mkdir pkg
          if [[ ${{ matrix.bits }} -eq 32 ]]; then LIBGCC="libgcc_s_dw2-1"; else LIBGCC="libgcc_s_seh-1"; fi
          for LIB in glew32 ${LIBGCC} libwinpthread-1 SDL2
          do
            echo ":: Copying ${LIB}.dll"
            cp "/mingw${{ matrix.bits }}/bin/${LIB}.dll" pkg/
          done
          cd projects/unix/
          for BIN in *.dll
          do
            echo ":: Copying ${BIN}"
            cp "${BIN}" ../../pkg/
          done
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: mupen64plus-video-z64-msys2-${{ matrix.platform }}-g${{ env.G_REV }}
          path: pkg/*

  Nightly-build:
    runs-on: ubuntu-latest
    needs: MSYS2
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: binaries
      - name: Get some tools
        run: |
          sudo apt-get update
          sudo apt-get -y install hashdeep
      - name: Creating new artifacts and update nightly-build
        run: |
          mkdir pkg
          cd binaries
          for BIN in *
          do
            echo ":: Creating ${BIN}.zip"
            cd "${BIN}"
            zip -r "../../pkg/${BIN}.zip" *
            cd ..
          done
          cd ../pkg
          echo ""
          for BIN in *.zip
          do
            ls -gG ${BIN}
            tigerdeep -l ${BIN} >> ${BIN:0:21}.tiger.txt
            sha256sum ${BIN} >> ${BIN:0:21}.sha256.txt
            sha512sum ${BIN} >> ${BIN:0:21}.sha512.txt
          done
          echo ""
          echo "TIGER:"
          cat *.tiger.txt
          echo ""
          echo "SHA256:"
          cat *.sha256.txt
          echo ""
          echo "SHA512:"
          cat *.sha512.txt
          echo ""
          git tag -f nightly-build
          git push -f origin nightly-build
      - name: Nightly-build
        uses: ncipollo/release-action@v1
        with:
          prerelease: true
          allowUpdates: true
          removeArtifacts: true
          replacesArtifacts: false
          tag: nightly-build
          artifacts: pkg/*
